! CONTEXT:
	/protocol/
		&<http://if.fault.io/text/composition>

[executable]

C fragments providing a customized Python entry point. Desired in cases
where applications need to control the environment to reduce the risk of initialization failures
due to customized user sites and (system/envvar)`PYTHONPATH`.

Two intiialization levels are available for configuration. The first is used for installing custom
loaders and the second is for executing desired prerequisites for the primary entry point.

/heading/#!syntax/c
	#ifdef __APPLE__
		#include <TargetConditionals.h>
	#endif

	#include <Python.h>
	#include <marshal.h>
	#include <sysexits.h>
	#include <unistd.h>
	#include <signal.h>

	#ifdef __FreeBSD__
		#include <fenv.h>
	#endif

	#ifndef FAULT_CONTEXT_NAME
		#define FAULT_CONTEXT_NAME "fault"
	#endif

	#ifdef _FAULT_INVOCATION
		#include <fault/python/invocation.h>
	#endif

	#if PY_VERSION_HEX < 0x03050000
		/* Renamed in 3.5+ */
		#define Py_DecodeLocale _Py_char2wchar
	#endif

	#define _PREFIX(X,STRING) X##STRING
	#define LSTR(STRING) _PREFIX(L,STRING)
	#define QUOTE(FIELD) #FIELD
	#define log(category, message, ...) \
		fprintf(stderr, "[!* " category ": " message "]\n", ##__VA_ARGS__)
	#define panic() do {signal(SIGUSR2, SIG_DFL); kill(getpid(), SIGUSR2);} while(0)

	#ifndef CONTROL_ACTIVATION_SYMBOL
		#define CONTROL_ACTIVATION_SYMBOL "activate"
	#endif

	#ifndef FACTOR_SYSTEM
		#define F_SYSTEM_STR
	#endif

	#ifndef FACTOR_MACHINE
		#define FACTOR_MACHINE F_TARGET_ARCHITECTURE_STR
	#endif

	#ifndef FACTOR_PYTHON
		#define FACTOR_PYTHON "cpython" QUOTE(PY_MAJOR_VERSION) QUOTE(PY_MINOR_VERSION)
	#endif

	#ifndef FACTOR_INTEGRALS
		#define FACTOR_INTEGRALS "__f-int__"
	#endif

	#ifndef FACTOR_INTENTION
		#define FACTOR_INTENTION "optimal"
	#endif

	#ifndef FAULT_INTENTION
		#define FAULT_INTENTION "optimal"
	#endif

	#define FAULT_CONTEXT_PATH FAULT_PYTHON_PRODUCT "/" FAULT_CONTEXT_NAME
	#define FAULT_SYSTEM_PATH FAULT_CONTEXT_PATH "/system"
	#define PYTHON_INTEGRALS FACTOR_SYSTEM "-" FACTOR_PYTHON

	#ifndef FAULT_BOOTSTRAP_SOURCE
		#define FAULT_BOOTSTRAP_SOURCE \
			(FAULT_SYSTEM_PATH "/bootstrap.py")
	#endif

	#ifndef FAULT_BOOTSTRAP_BYTECODE
		#define FAULT_BOOTSTRAP_BYTECODE \
			(FAULT_SYSTEM_PATH "/" FACTOR_INTENTION "/" PYTHON_INTEGRALS \
			"/bootstrap." FACTOR_INTENTION ".i")
	#endif

/initialize-application-context/#!syntax/c
	/**
		// Disable most environment based configuration.
	*/
	static void
	initialize_context(void)
	{
		wchar_t **wargv;

		/**
			// The python.org binary conditionally runs this on FreeBSD.
			// Arguably, it should be a no-op on any platform if it's already off.
		*/
		#ifdef __FreeBSD__
			fedisableexcept(FE_OVERFLOW);
		#endif

		/**
			// Presume user site might interfere with the application.
			// Application can activate it in an initializer if it's desired.
		*/
		Py_NoUserSiteDirectory = 1;

		/**
			// Application Context settings.
		*/
		Py_IgnoreEnvironmentFlag = 1;
		Py_DebugFlag = 0;
		Py_BytesWarningFlag = 2;
		Py_IsolatedFlag = 1;

		/**
			// Avoid implicit side effects; even generally accepted ones.
		*/
		Py_DontWriteBytecodeFlag = 1;
	}

/bootstrap-execution/#!syntax/c
	/**
		// Execute the bytecode or source for bootstrapping the factor loader.
	*/
	static PyObject *
	bootstrap(const char *bytecode, const char *source)
	{
		FILE *fp;
		PyObject *code, *r, *module, *exedict;

		module = PyModule_New("__bootstrap__");
		if (module == NULL)
			return(NULL);
		exedict = PyModule_GetDict(module);

		if (PyModule_AddStringConstant(module, "__file__", source) != 0)
		{
			Py_DECREF(module);
			return(NULL);
		}

		if (bytecode != NULL)
		{
			if (PyModule_AddStringConstant(module, "__cache__", bytecode) != 0)
			{
				Py_DECREF(module);
				return(NULL);
			}

			fp = fopen(bytecode, "rb");
			if (fp != NULL)
			{
				code = PyMarshal_ReadObjectFromFile(fp);
				fclose(fp);

				if (code != NULL)
				{
					r = PyEval_EvalCode(code, exedict, exedict);
					Py_DECREF(code);

					if (r != NULL)
					{
						/* Succesfully bootstrapped */
						Py_DECREF(r);
						return(module);
					}

					/* Execute source instead */
					PyErr_Clear();
				}
			}
		}

		fp = fopen(source, "rb");
		if (fp == NULL)
		{
			/* Source could not be opened */
			Py_DECREF(module);
			return(NULL);
		}

		r = PyRun_File(fp, source, Py_file_input, exedict, exedict);
		fclose(fp);
		fp = NULL;

		if (r != NULL)
		{
			Py_DECREF(r);
			return(module);
		}

		/* Source execution failed. */
		Py_DECREF(module);
		return(NULL);
	}

/allocate/#!syntax/c
	/**
		// Allocate and convert system arguments for loading sys.argv as bin/python would.
	*/
	static wchar_t **
	aalloc(int argc, char *argv[])
	{
		int i, r;
		size_t nbytes;
		wchar_t **wargv;

		nbytes = sizeof(wchar_t *) * (argc + 1 + ARGUMENT_COUNT);
		wargv = PyMem_RawMalloc(nbytes);
		if (wargv == NULL)
		{
			log("ERROR", "could not allocate %zd bytes of memory for system arguments", nbytes);
			return(NULL);
		}

		i = 0;
		#define ARGUMENT(ARGSTR) \
			wargv[i] = Py_DecodeLocale(ARGSTR, NULL); \
			if (wargv[i] == NULL) \
			{ \
				log("ERROR", "could not decode system arguments for application"); \
				return(NULL); \
			} \
			++i;

			/* Constants first then actual arguments */
			ARGUMENT(argv[0]);
			ARGUMENTS
			for (r = 1; r < argc; ++r)
			{
				ARGUMENT(argv[r]);
			}
		#undef ARGUMENT

		return(wargv);
	}

/main-open/#!syntax/c
	static wchar_t executable_path[] = LSTR(PYTHON_EXECUTABLE_PATH);
	int
	main(int argc, char *argv[])
	{

/main/#!syntax/c
	/**
		// SIGUSR1 is used to signal initialization or bootstrap exceptions.
		// SIGUSR2 is used to designate that a python initialization error occurred.
		// EX_SOFTWARE is returned, but usually unreachable as panic() causes a signal exit.
	*/

	int r, nbytes;
	wchar_t **wargv;
	PyObject *ob, *mod;

	initialize_context();
	wargv = aalloc(argc, argv);
	if (wargv == NULL)
	{
		panic();
		return(EX_SOFTWARE);
	}

	/*
		// sys.executable explicitly configured by the binding.
		// Normally this should point to the Python executable within the installation prefix.
	*/
	Py_SetProgramName(executable_path);

	#ifdef PYTHON_PATH
		/*
			// Hardcoded at compile time. Relocating/removing the dependency requires
			// the executable to be rebuilt.
		*/
		Py_SetPath(LSTR(PYTHON_PATH_STR));
	#endif

	Py_Initialize();
	if (!Py_IsInitialized())
	{
		log("ERROR", "could not initialize python");
		panic();
		return(EX_SOFTWARE);
	}

	PySys_SetArgvEx(argc+ARGUMENT_COUNT, wargv, 0);

	#if (PY_MAJOR_VERSION == 3 && PY_MINOR_VERSION < 7) || PY_MAJOR_VERSION < 3
	{
		PyEval_InitThreads();
		if (!PyEval_ThreadsInitialized())
		{
			log("ERROR", "could not initialize threading");
			panic();
			return(EX_SOFTWARE);
		}
	}
	#endif

	ob = PySys_GetObject("path");
	if (ob == NULL)
	{
		log("ERROR", "could not initialize execution context");
		panic();
		return(EX_SOFTWARE);
	}

	#ifdef _FAULT_INVOCATION
	{
		PyObject *boots, *factors;

		boots = bootstrap(FAULT_BOOTSTRAP_BYTECODE, FAULT_BOOTSTRAP_SOURCE);
		if (boots == NULL)
		{
			log("ERROR", "could not bootstrap the factor loader");
			PyErr_Print();
			fflush(stderr);
			panic();
			return(EX_SOFTWARE);
		}

		/* Product paths given as varargs. */
		factors = PyObject_CallMethod(boots, "integrate",
			#define FACTOR_PATH_STRING(x) "s"
				"ssssssss"
				FACTOR_PATH,
			#undef FACTOR_PATH_STRING

			FAULT_PYTHON_PRODUCT,
			FAULT_CONTEXT_NAME,
			FAULT_INTENTION,
			FACTOR_INTEGRALS,
			FACTOR_SYSTEM,
			FACTOR_PYTHON,
			FACTOR_MACHINE,
			FACTOR_INTENTION

			#define FACTOR_PATH_STRING(x) , x
				FACTOR_PATH
			#undef FACTOR_PATH_STRING
		);
		Py_DECREF(boots);

		if (factors == NULL)
		{
			log("ERROR", "could not bootstrap the factor loader");
			PyErr_Print();
			fflush(stderr);
			panic();
			return(EX_SOFTWARE);
		}

		Py_DECREF(factors);
	}
	#endif

	mod = PyImport_ImportModule(TARGET_MODULE);
	if (mod == NULL)
	{
		log("ERROR", "could not import application module: " TARGET_MODULE);
		PyErr_Print();
		panic();
		return(EX_SOFTWARE);
	}
	else
		Py_DECREF(mod);

	#ifdef PYTHON_CONTROL_IMPORTS
	{
		PyObject *init_exit_object = NULL;
		PyObject *control_module = NULL;

		#define IMPORT(x) \
			control_module = PyImport_ImportModule(x); \
			if (control_module == NULL) { \
				log("ERROR", "could not import control module"); \
				PyErr_Print(); \
				fflush(stderr); \
				panic(); \
				return(EX_SOFTWARE); \
			} \
			init_exit_object = PyObject_CallMethod(control_module, \
				CONTROL_ACTIVATION_SYMBOL, "ss", TARGET_MODULE, DEFAULT_ENTRY_POINT); \
			Py_DECREF(control_module); \
			if (init_exit_object == NULL) { \
				log("ERROR", "control module (%s) activation raised exception", x); \
				PyErr_Print(); \
				fflush(stderr); \
				panic(); \
				return(EX_SOFTWARE); \
			} \
			else \
				Py_DECREF(init_exit_object);

			PYTHON_CONTROL_IMPORTS;
		#undef IMPORT
	}
	#endif

	/**
		// Main execution. Calls DEFAULT_ENTRY_POINT in TARGET_MODULE.
		// For fault invocations, a &fault.system.process.Invocation instance
		// is created and passed to main.
	*/
	{
		#ifdef _FAULT_INVOCATION
			PyObject *_f_process = NULL;
			PyObject *_f_sysinv = NULL;
			PyObject *_f_main = NULL;

			_f_main = PyObject_GetAttrString(mod, DEFAULT_ENTRY_POINT);
			if (_f_main == NULL)
			{
				log("ERROR", "could not get entry point from "
					"application module: " DEFAULT_ENTRY_POINT);
				panic();
				return(EX_SOFTWARE);
			}
			_f_sysinv = _fault_system_invocation(&_f_process);

			if (_f_sysinv == NULL)
			{
				log("ERROR", "could not create Invocation instance");
				panic();
				return(EX_SOFTWARE);
			}
			ob = PyObject_CallMethod(_f_process, "control", "OO", _f_main, _f_sysinv);

			Py_DECREF(_f_process);
			Py_DECREF(_f_main);
			Py_DECREF(_f_sysinv);
		#else
			ob = PyObject_CallMethod(mod, DEFAULT_ENTRY_POINT, "");
		#endif
	}

	r = EX_SOFTWARE;

	if (ob != NULL)
	{
		/*
			// As an alternative, entry points may choose to return
			// the exit status directly. However, SystemExit is supported as well.
		*/

		if (ob == Py_None)
		{
			r = EX_OK;
		}
		else if (PyLong_Check(ob))
		{
			r = (int) PyLong_AsLong(ob);
		}

		Py_DECREF(ob);
		ob = NULL;
	}
	else
	{
		if (PyErr_ExceptionMatches(PyExc_SystemExit))
		{
			PyObject *exc, *val, *tb;
			PyErr_Fetch(&exc, &val, &tb);
			PyObject *pi;

			if (val)
			{
				pi = PyObject_GetAttrString(val, "code");
				if (pi)
				{
					r = (int) PyLong_AsLong(pi);
					Py_DECREF(pi);
				}
			}

			Py_DECREF(exc);
			Py_XDECREF(val);
			Py_XDECREF(tb);

			PyErr_Clear();
		}
		else
		{
			log("ERROR", "application raised exception");
			PyErr_Print();
			fflush(stderr);
			r = EX_SOFTWARE;
		}
	}

	Py_Exit(r);
	return(r);

/main-close/#!syntax/c
	}
